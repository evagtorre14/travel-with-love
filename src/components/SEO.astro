---
import type { CollectionEntry } from "astro:content";

interface Props {
  title: string;
  description: string;
  image?: string;
  article?: {
    publishedTime: string;
    author: string;
    tags: string[];
  };
}

const {
  title,
  description,
  image = "/images/og-image.jpg", // Imagen por defecto
  article,
} = Astro.props;

const { site } = Astro;
const formatedSiteUrl = site ? site.href.slice(0, -1) : "https://travelwithlove.dev";
const canonicalUrl = new URL(Astro.url.pathname, formatedSiteUrl).href;
const formatedTitle = `${title} | TravelWithLove`;
const formatedImage = new URL(image, formatedSiteUrl).href;
---

<!-- SEO -->
<title>{formatedTitle}</title>
<meta name="description" content={description} />
<link rel="canonical" href={canonicalUrl} />

<!-- Open Graph -->
<meta property="og:title" content={formatedTitle} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:image" content={formatedImage} />
<meta property="og:site_name" content="TravelWithLove" />
<meta property="og:type" content={article ? "article" : "website"} />

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={formatedTitle} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={formatedImage} />

<!-- Article -->
{
  article && (
    <>
      <meta property="article:published_time" content={article.publishedTime} />
      <meta property="article:author" content={article.author} />
      {article.tags.map((tag) => (
        <meta property="article:tag" content={tag} />
      ))}
    </>
  )
}
